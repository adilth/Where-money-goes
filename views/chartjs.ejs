 <%- include('partials/header.ejs') -%>
 <div class="dashboard flex charset">
   <div><h3 class="text-chart">more your Details about your spends</h3></div>
   <div class="dashboard-cards">
    <div class="card card-flex">
      <div class="card-content">
        <p class="number">Total: $<% if(total.length > 0){  %>
        <%= total[0].count %> 
        <% } %> 
        </p>
        <p class="card-name">Total</p>
      </div>
      <div class="card-icon">
        <i class="fa fa-dollar-sign"></i>
      </div>
    </div>
    <div class="card card-flex">
      <div class="card-content">
        <p class="number"><%= spendCards  %> </p>
        <p class="card-name">spend cards</p>
      </div>
      <div class="card-icon">
        <i class="fa fa-layer-group"></i>
      </div>
    </div>
    <div class="card card-flex">
      <div class="card-content">
        <p class="number"><% if( total.length > 0){ %>
        <%= total[0].average.toFixed(1)  %>
        <% } %> 
        </p>
        <p class="card-name">Average</p>
      </div>
      <div class="card-icon">
        <i class="fa fa-dollar-sign"></i>
      </div>
    </div>
   </div>
   <div class="select-wrapper">
                      <select name="datepicker" id="datepicker" onchange="getSelectValue()">
                       <% [...new Set(months.map(el => el._id.year))].forEach(year => { %>
                            <option value="<%= year %>"><%= year %></option>
                            <script>

                            </script>
                          <% }) %> 
                        </select>
                        
    </div> 
    <div class="cont-chart dashboard-cards" data-chart-data="<%= JSON.stringify(months.map((el) => el._id.month)) %>" data-chart-label="<%= JSON.stringify(months.map((el) => el.count)) %>">
      <div class="card"><canvas id="myChart"></canvas></div>
      <div class="card"><canvas id="myChartLine"></canvas></div>
      <div class="card"><canvas id="myChartAvg"></canvas></div>
      <div class="card"><canvas id="myCharOption"></canvas>
      <select name="dateRange" onchange="filterChart(this)">
        <option value="">Select Please</option>
        <option value="1">1 Month</option>
        <option value="3">3 Months</option>
        <option value="12">12 Months</option>
      </select>
      </div>
  </div>
 </div>
  
<script>
  var e = JSON.parse(document.getElementById('datepicker').value);
function getSelectValue()
        {
            var e = JSON.parse(document.getElementById('datepicker').value);
          // in your EJS file.
let filtered = JSON.parse('<%- JSON.stringify(months.map(el => el)) %>');
let date = filtered.filter(el => el._id.year == e)
console.log(date)
        var ctx = document.getElementById("myChart").getContext("2d");
        var ctxLine = document.getElementById("myChartLine").getContext("2d");
        var ctxAvg = document.getElementById("myChartAvg").getContext("2d");
        data = {
        labels:date.map((el) => el._id.month),
        datasets: [
          {
            label: "Monthly Spends",
            backgroundColor: "rgba(255,99,132,0.2)",
            borderColor: "rgba(255,99,132,1)",
            borderWidth: 2,
            hoverBackgroundColor: "rgba(255,99,132,0.4)",
            hoverBorderColor: "rgba(255,99,132,1)",
            data: JSON.parse('<%- JSON.stringify(months.map((el) => el.count))%>'),
          }
        ]
      }
        data2 = {
        labels:date.map((el) => el._id.month),
        datasets: [
          {
            label: "Monthly Spends average",
            backgroundColor: "rgba(255,99,132,0.2)",
            borderColor: "rgba(255,99,132,1)",
            borderWidth: 2,
            hoverBackgroundColor: "rgba(255,99,132,0.4)",
            hoverBorderColor: "rgba(255,99,132,1)",
            data: JSON.parse('<%- JSON.stringify(months.map((el) => el.average))%>'),
          }
        ]
      }
      const options = {
        scales:{
          yAxes :[{
            display: true,
            ticks: {
              color:'#fff',
              beginATZero : true,
              userCallback : function(value){
                value = value.toString();
                return '$' + value
              },
              
            }
          }]
        },
            responsive: true
      
      }
        const config = {
          type: 'bar',
          data:data,
          options:options,
        }
        // console.log(config)
        const config2 = {
          type: 'line',
          data:data,
          options:options,
        }
        const configAvg = {
          type: 'bar',
          data:data2,
          options:options,
        }
        var myNewChart = new Chart(ctx, config)
        var myNewChartLine = new Chart(ctxLine, config2)
        var myNewChartAvg = new Chart(ctxAvg, configAvg)
        // var myNewChart = new Chart(ctx).Line(data);
        const month = JSON.parse('<%- JSON.stringify(months.map((el) => el._id))%>');
        }
        getSelectValue();

         var ctx = document.getElementById("myCharOption").getContext("2d");
         let yearly = JSON.parse('<%- JSON.stringify(days.map(el => el)) %>');
        //  console.log(yearly)
         data = {
        labels:yearly.map((el) => el._id ),
        datasets: [
          {
            label: "Monthly Spends",
            backgroundColor: "rgba(255,99,132,0.2)",
            borderColor: "rgba(255,99,132,1)",
            borderWidth: 1,
            hoverBackgroundColor: "rgba(255,99,132,0.4)",
            hoverBorderColor: "rgba(255,99,132,1)",
            data: JSON.parse('<%- JSON.stringify(days.map((el) => el.count))%>'),
          }
        ]
      }
      // console.log(data)
      const options = {
          title: {
            display: true,
            Text:"Monthly",
            fontSize: '20',
            fontFamily: "'Roboto','sans-serif'",
        },
        scales:{
          xAxes: [{
            type:'time',
            time:{
              unit: 'month',
            },
            min:'2022-01-01',
            max: Date.now(),
          }],
          yAxes :[{
            ticks: {
              color:'#fff',
              beginATZero : true,
              userCallback : function(value){
                value = value.toString();
                return '$' + value
              },
              
            },
            beginATZero:true
          }]
        },
            responsive: true
      
      }
        const config = {
          type: 'bar',
          data:data,
          options:options,
        }
        var myNewChart = new Chart(ctx, config)
        function filterChart(months){
         myNewChart.config.options.scales.xAxes.min = luxon.DateTime.now().plus({months: !months.value ? -1 : -months.value }).toISODate();
         myNewChart.config.options.scales.xAxes.max = luxon.DateTime.now().toISODate();
         console.log(myNewChart.config.options.scales.xAxes.min)
         myNewChart.update()
        }
        // filterChart(this)
    </script>